{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","trigger","hasImage","plus","setState","id","CursorImage","lazy","__webpack_require__","e","then","bind","react_default","a","createElement","react","fallback","_this2","_this$props","name","url","replace","toLowerCase","_this$state","concat","onMouseEnter","loadCursorImage","href","className","undefined","target","rel","showImage","Component","App","body","document","getElementsByTagName","cred","getElementById","addEventListener","classList","add","remove","data","map","loc","i","src_ListItem_0","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b997827d.chunk.js","sourcesContent":["import React, { Component, lazy, Suspense } from 'react';\nimport './ListItem.css';\n\nclass ListItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trigger: false,\n      hasImage: props.plus,\n    }\n  }\n\n  loadCursorImage() {\n    if (this.state.hasImage && !this.state.trigger) {\n      this.setState({ trigger: true });\n    }\n  }\n\n  showImage(id) {\n    const CursorImage = lazy(() => import('./CursorImage'));\n    return (\n      <Suspense fallback={<span id=\"loading\">Loading...</span>}>\n        <CursorImage id={id} />\n      </Suspense>\n    );\n  }\n\n  render() {\n    const { name, url, plus } = this.props;\n    const id = name\n      .replace(/'| &/g, '')\n      .replace(/\\/| /g, '-')\n      .toLowerCase();\n\n    const { trigger, hasImage } = this.state;\n\n    return (\n      <li id={`el-${id}`} onMouseEnter={() => this.loadCursorImage()}>\n        <a href={url}\n          className={plus ? undefined : 'plus'}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {name}\n        </a>\n        {hasImage && trigger && (\n          this.showImage(id)\n        )}\n      </li>\n    );\n  }\n}\n\nexport default ListItem;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\nimport data from './data.json';\n\nclass App extends Component {\n  componentDidMount() {\n    const body = document.getElementsByTagName('body')[0];\n    const cred = document.getElementById('cred');\n    cred.addEventListener(\"mousemove\", e => {\n      body.classList.add('cred');\n    });\n\n    cred.addEventListener(\"mouseout\", e => {\n      body.classList.remove('cred');\n    });\n  }\n\n  render() {\n    return (\n      <main>\n        <section>\n          <h1>When  in... <br /><span id=\"cred\">SEE</span>-attle</h1>\n        </section>\n        <section>\n          <h2>Food</h2>\n          <p>i really miss the lo mein in chinatown, sushi by the water, and doughnuts in the Spheres</p>\n          {data['food'].map((loc, i) => (\n            <ListItem key={i}\n              name={loc.name}\n              url={loc.url}\n              plus={loc.hasImage}\n              />\n          ))}\n\n          <p className=\"plus ad\">\n            see @<a href=\"https://instagram.com/ethannoms\" target=\"_blank\" rel=\"noopener noreferrer\">ethannoms</a> #ad\n          </p>\n\n        </section>\n\n        <section>\n          <h2>Nature</h2>\n          <p>not much of a winter hiker but here's what i did and did not do</p>\n          {data['nature'].map((loc, i) => (\n            <ListItem key={i}\n              name={loc.name}\n              url={loc.url}\n              plus={loc.hasImage}\n              />\n          ))}\n        </section>\n\n        <section>\n          <h2>Cafes</h2>\n          <p>i don't remember going out for coffee as much as i do now but here's a short list, not a shortlist</p>\n          {data['cafes'].map((loc, i) => (\n            <ListItem key={i}\n              name={loc.name}\n              url={loc.url}\n              plus={loc.hasImage}\n              />\n          ))}\n        </section>\n\n        <section>\n          <h2>Art</h2>\n          <p>Seattle is all about glass and wood art and i am not a fan of either but here's some places that featured non-glass/wood exhibits</p>\n          {data['art'].map((loc, i) => (\n            <ListItem key={i}\n              name={loc.name}\n              url={loc.url}\n              plus={loc.hasImage}\n              />\n          ))}\n        </section>\n\n        <section>\n          <h2>Other</h2>\n          {/*<p>lots of fun and cool places around the city</p>*/}\n          {data['other'].map((loc, i) => (\n            <ListItem key={i}\n              name={loc.name}\n              url={loc.url}\n              plus={loc.hasImage}\n              />\n          ))}\n        </section>\n\n        <footer>\n          <p className=\"plus ad\">Photos not available (coming soon)</p>\n        </footer>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}